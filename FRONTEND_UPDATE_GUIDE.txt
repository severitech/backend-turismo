===============================================================================
üöÄ GU√çA PARA ACTUALIZAR FRONTEND - REGISTRO DE USUARIO
===============================================================================

üìã CONTEXTO
-----------
He actualizado mi backend Django para mejorar el formulario de registro de usuarios. 
Necesito actualizar mi frontend para que coincida con los nuevos campos de la API.

üîÑ CAMBIOS REALIZADOS EN EL BACKEND
-----------------------------------

ANTES:
{
    "nombre": "Juan P√©rez",
    "email": "juan@email.com",
    "password": "password123",
    "password_confirm": "password123",
    "telefono": "+591 70123456"
}

AHORA:
{
    "nombres": "Juan Carlos",
    "apellidos": "P√©rez Garc√≠a", 
    "email": "juan.perez@email.com",
    "password": "MiPassword123!",
    "password_confirm": "MiPassword123!",
    "telefono": "+591 70123456",
    "fecha_nacimiento": "1990-05-15",
    "genero": "M",
    "documento_identidad": "12345678",
    "pais": "Bolivia"
}

üìä ESPECIFICACIONES DE CAMPOS
------------------------------

CAMPOS REQUERIDOS:
- nombres (String) - Nombres del usuario
- apellidos (String) - Apellidos del usuario  
- email (String) - Email √∫nico
- password (String) - Contrase√±a (m√≠nimo 8 caracteres)
- password_confirm (String) - Confirmaci√≥n de contrase√±a

CAMPOS OPCIONALES:
- telefono (String) - N√∫mero de tel√©fono
- fecha_nacimiento (Date) - Formato: YYYY-MM-DD
- genero (Select) - Opciones:
  * "M" (Masculino)
  * "F" (Femenino)
  * "O" (Otro)
  * "N" (Prefiero no decir)
- documento_identidad (String) - C√©dula de identidad o pasaporte
- pais (String) - Pa√≠s de residencia

üîß ENDPOINT DE LA API
---------------------
URL: http://127.0.0.1:8000/api/auth/register/
M√©todo: POST
Headers: Content-Type: application/json

üéØ TAREAS A REALIZAR
--------------------

1. ACTUALIZAR FORMULARIO DE REGISTRO
   - Cambiar campo "nombre" por "nombres" y "apellidos" (dos campos separados)
   - Agregar campo "fecha_nacimiento" (date picker)
   - Agregar campo "genero" (select/dropdown)
   - Agregar campo "documento_identidad" (input text)
   - Agregar campo "pais" (input text o select)

2. VALIDACIONES FRONTEND
   - nombres y apellidos: requeridos, solo letras y espacios
   - email: formato v√°lido de email
   - password: m√≠nimo 8 caracteres
   - password_confirm: debe coincidir con password
   - fecha_nacimiento: formato v√°lido de fecha, usuario mayor de edad
   - telefono: formato de tel√©fono v√°lido (opcional)

3. UX/UI MEJORADAS
   Organizar campos en secciones l√≥gicas:
   
   INFORMACI√ìN PERSONAL:
   - nombres
   - apellidos
   - fecha_nacimiento
   - genero
   
   DATOS DE CONTACTO:
   - email
   - telefono
   - pais
   
   IDENTIFICACI√ìN:
   - documento_identidad
   
   SEGURIDAD:
   - password
   - password_confirm

   - Agregar placeholders descriptivos
   - Mostrar indicadores de campos requeridos (*)
   - Feedback visual para validaciones

4. MANEJO DE RESPUESTAS

RESPUESTA EXITOSA (201):
{
    "message": "Usuario registrado exitosamente",
    "user": {
        "id": 1,
        "nombres": "Juan Carlos",
        "apellidos": "P√©rez Garc√≠a",
        "nombre_completo": "Juan Carlos P√©rez Garc√≠a",
        "email": "juan.perez@email.com",
        "telefono": "+591 70123456",
        "fecha_nacimiento": "1990-05-15",
        "genero": "M",
        "documento_identidad": "12345678",
        "pais": "Bolivia",
        "estado": "ACTIVO",
        "created_at": "2025-09-08T23:36:00Z"
    }
}

ERRORES COMUNES (400):
{
    "email": ["email ya existe"],
    "non_field_errors": ["Las contrase√±as no coinciden."],
    "nombres": ["Este campo es requerido."],
    "apellidos": ["Este campo es requerido."]
}

üí° SUGERENCIAS DE IMPLEMENTACI√ìN
--------------------------------
1. Mantener dise√±o responsive
2. Agregar tooltips para explicar campos como "documento_identidad"
3. Implementar autocompletado para "pais"
4. Validaci√≥n en tiempo real para mejor UX
5. Mostrar fortaleza de contrase√±a
6. Considerar usar librer√≠as de validaci√≥n (Yup, Joi, etc.)

üé® MEJORAS DE UX OPCIONALES
---------------------------
- Progreso visual del formulario (steps/wizard)
- Animaciones suaves entre campos
- Iconos descriptivos para cada campo
- Dark mode compatibility
- Internacionalizaci√≥n (i18n) para labels

üìù EJEMPLO DE FORMULARIO HTML
-----------------------------
<form id="registerForm">
  <!-- Informaci√≥n Personal -->
  <fieldset>
    <legend>Informaci√≥n Personal</legend>
    <input type="text" name="nombres" placeholder="Nombres" required>
    <input type="text" name="apellidos" placeholder="Apellidos" required>
    <input type="date" name="fecha_nacimiento" placeholder="Fecha de Nacimiento">
    <select name="genero">
      <option value="">Seleccionar g√©nero</option>
      <option value="M">Masculino</option>
      <option value="F">Femenino</option>
      <option value="O">Otro</option>
      <option value="N">Prefiero no decir</option>
    </select>
  </fieldset>

  <!-- Datos de Contacto -->
  <fieldset>
    <legend>Datos de Contacto</legend>
    <input type="email" name="email" placeholder="Email" required>
    <input type="tel" name="telefono" placeholder="Tel√©fono">
    <input type="text" name="pais" placeholder="Pa√≠s">
  </fieldset>

  <!-- Identificaci√≥n -->
  <fieldset>
    <legend>Identificaci√≥n</legend>
    <input type="text" name="documento_identidad" placeholder="C√©dula de Identidad">
  </fieldset>

  <!-- Seguridad -->
  <fieldset>
    <legend>Seguridad</legend>
    <input type="password" name="password" placeholder="Contrase√±a" required>
    <input type="password" name="password_confirm" placeholder="Confirmar Contrase√±a" required>
  </fieldset>

  <button type="submit">Registrarse</button>
</form>

üìã EJEMPLO DE VALIDACIONES JAVASCRIPT
--------------------------------------
function validateForm(data) {
  const errors = {};
  
  // Campos requeridos
  if (!data.nombres) errors.nombres = 'Los nombres son requeridos';
  if (!data.apellidos) errors.apellidos = 'Los apellidos son requeridos';
  if (!data.email) errors.email = 'El email es requerido';
  if (!data.password) errors.password = 'La contrase√±a es requerida';
  if (!data.password_confirm) errors.password_confirm = 'Confirme la contrase√±a';
  
  // Validaciones espec√≠ficas
  if (data.email && !/\S+@\S+\.\S+/.test(data.email)) {
    errors.email = 'Formato de email inv√°lido';
  }
  
  if (data.password && data.password.length < 8) {
    errors.password = 'La contrase√±a debe tener al menos 8 caracteres';
  }
  
  if (data.password !== data.password_confirm) {
    errors.password_confirm = 'Las contrase√±as no coinciden';
  }
  
  return errors;
}

===============================================================================
üìû CONTACTO
-----------
Si necesitas ayuda adicional o tienes preguntas sobre la implementaci√≥n,
no dudes en consultarme.

Fecha de actualizaci√≥n: 8 de Septiembre, 2025
===============================================================================
